// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  pin        String?
  role       String    @default("USER")
  businessId String
  business   Business  @relation(fields: [businessId], references: [id])
  employees Employee[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Business {
  id            String   @id @default(cuid())
  name          String
  address       String
  type          String
  employeesCount Int
  users         User[]
  invitations   Invitation[]
  departments   Department[]
  employeeGroups EmployeeGroup[]
  payrollPeriods PayrollPeriod[]
  attendances   Attendance[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Employee {
  id              String     @id @default(cuid())
  user            User       @relation(fields: [userId], references: [id])
  userId          String 
  employeeGroup   EmployeeGroup? @relation("EmployeeToGroup", fields: [employeeGroupId], references: [id])
  employeeGroupId String?
  firstName       String
  lastName        String
  email           String?   @unique
  birthday        DateTime
  sex             Sex
  socialSecurityNo String?    @unique
  address         String
  mobile          String
  employeeNo      String?     @unique
  bankAccount     String
  hoursPerMonth   Float?
  dateOfHire      DateTime
  isTeamLeader    Boolean    @default(false)
  department      Department @relation(fields: [departmentId], references: [id])
  departmentId    String
  timeEntries     TimeEntry[]
  sickLeaves      SickLeave[]
  workPlans       WorkPlan[]
  shifts          Shift[]
  fromShiftExchanges ShiftExchange[] @relation("FromEmployee")
  toShiftExchanges   ShiftExchange[] @relation("ToEmployee")
  availabilities  Availability[]
  payrollEntries  PayrollEntry[]
  attendances     Attendance[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum WageType {
  HOURLY
  PER_SHIFT
}

model EmployeeGroup {
  id               String       @id @default(cuid())
  name             String       
  hourlyWage       Float
  wagePerShift     Float
  defaultWageType  WageType     @default(HOURLY)
  salaryCode       String       
  businessId       String
  business         Business     @relation(fields: [businessId], references: [id])
  employees        Employee[]   @relation("EmployeeToGroup")
  shifts           Shift[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([name, businessId])
  @@unique([salaryCode, businessId])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  number      String?
  address     String
  address2    String?
  postCode    String?
  city        String
  phone       String
  country     String
  businessId  String
  business    Business   @relation(fields: [businessId], references: [id])
  employees   Employee[]
  projects    Project[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Project {
  id           String     @id @default(cuid())
  name         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  timeEntries  TimeEntry[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model TimeEntry {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  checkIn     DateTime
  checkOut    DateTime?
  gpsLatitude Float?
  gpsLongitude Float?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SickLeave {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  reason      String?
  document    String?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Availability {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  date        DateTime
  isAvailable Boolean  @default(true)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([employeeId, date])
}

model WorkPlan {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  breaks      Break[]
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Break {
  id          String   @id @default(cuid())
  workPlan    WorkPlan @relation(fields: [workPlanId], references: [id])
  workPlanId  String
  startTime   DateTime
  endTime     DateTime
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shift {
  id              String      @id @default(cuid())
  date            DateTime
  startTime       String    
  endTime         String?   
  employee        Employee?   @relation(fields: [employeeId], references: [id])
  employeeId      String?
  employeeGroup   EmployeeGroup? @relation(fields: [employeeGroupId], references: [id])
  employeeGroupId String?
  shiftType       ShiftType
  status          ShiftStatus @default(SCHEDULED)
  breakStart      DateTime?   
  breakEnd        DateTime?
  breakPaid       Boolean     @default(false)
  wage            Float
  wageType        WageType    @default(HOURLY)
  note            String?
  approved        Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shiftExchanges  ShiftExchange[]
  attendances     Attendance[]
}

model ShiftExchange {
  id             String   @id @default(cuid())
  shift          Shift    @relation(fields: [shiftId], references: [id])
  shiftId        String
  fromEmployee   Employee @relation("FromEmployee", fields: [fromEmployeeId], references: [id])
  fromEmployeeId String
  toEmployee     Employee @relation("ToEmployee", fields: [toEmployeeId], references: [id])
  toEmployeeId   String
  status         String   @default("PENDING") // PENDING, APPROVED, REJECTED
  reason         String?
  requestedAt    DateTime @default(now())
  approvedAt     DateTime?
  approvedBy     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Invitation {
  id         String   @id @default(cuid())
  email      String   @unique
  token      String   @unique
  firstName  String?
  lastName   String?
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PayrollPeriod {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  status      PayrollPeriodStatus @default(DRAFT)
  business    Business @relation(fields: [businessId], references: [id])
  businessId  String
  payrollEntries PayrollEntry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([businessId, startDate, endDate])
}

model PayrollEntry {
  id               String        @id @default(cuid())
  employee         Employee      @relation(fields: [employeeId], references: [id])
  employeeId       String
  payrollPeriod    PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  payrollPeriodId  String
  regularHours     Float         @default(0)
  overtimeHours    Float         @default(0)
  regularRate      Float
  overtimeRate     Float
  grossPay         Float
  deductions       Float         @default(0)
  netPay           Float
  bonuses          Float         @default(0)
  status           PayrollEntryStatus @default(DRAFT)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([employeeId, payrollPeriodId])
}

enum Role {
  ADMIN
  HR_ADMIN
  KONTO_ADMIN
  VAKTPLAN_ADMIN
  EMPLOYEE
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum ShiftType {
  NORMAL
  ABSENT
  ARRIVED_LATE
  MEETING
  SICK
  TIME_OFF
  TRAINING
}

enum PayrollPeriodStatus {
  DRAFT
  FINALIZED
  CLOSED
}

enum PayrollEntryStatus {
  DRAFT
  APPROVED
  PAID
}

enum ShiftStatus {
  SCHEDULED
  WORKING
  COMPLETED
  CANCELLED
}

model Attendance {
  id           String    @id @default(cuid())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String
  businessId   String
  business     Business  @relation(fields: [businessId], references: [id])
  shift        Shift?    @relation(fields: [shiftId], references: [id])
  shiftId      String?
  punchInTime  DateTime
  punchOutTime DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

